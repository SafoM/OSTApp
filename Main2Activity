
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.StrictMode;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.TextView;

import com.DeployServer.Tasks;

import java.util.ArrayList;

public class Main2Activity extends AppCompatActivity
{
    //TextView tasks;
    //EditText editTask;
    private static ServerConnection serverConnection;
    ArrayList<String> name = new ArrayList();
    private String clientName;
    ListAdapter taskAdapter;
    ListView taskView;
    Main2Activity act;
    private TasksUpdater tasksUpdater;

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main2);
        act = this;

        serverConnection = new ServerConnection(this);
        serverConnection.start();
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);

        taskAdapter = new ArrayAdapter<String>(
                this, android.R.layout.simple_list_item_1, name){

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                View view =super.getView(position, convertView, parent);

                TextView textView=(TextView) view.findViewById(android.R.id.text1);
               if (position < serverConnection.getNumberOfSosTasks()) {
                    view.setBackgroundColor(Color.parseColor("#FF0000"));
                    textView.setTextColor(Color.parseColor("#FFFFFF"));
                } else {
                    view.setBackgroundColor(Color.parseColor("#000000"));
                    textView.setTextColor(Color.parseColor("#FFFFFF"));
                }
                return view;
            }
        };
        taskView = (ListView) findViewById(R.id.taskView);
        taskView.setAdapter(taskAdapter);

        tasksUpdater = new TasksUpdater(this);
        //tasksUpdater.start();

        clientName = "super";

        taskView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, final int position, long id) {
            if (!(name.get(0).contains("No new "))) {
                AlertDialog.Builder descAlert = new AlertDialog.Builder(act);
                descAlert.setCancelable(true);

                if (serverConnection.getNumberOfSosTasks() != 0 && (position < serverConnection.getNumberOfSosTasks())) {
                    descAlert.setMessage(serverConnection.sosTaskND((byte) position, (byte) 1));
                } else {
                    final Tasks task = tasksUpdater.getTasks().get(position - serverConnection.getNumberOfSosTasks());
                    descAlert.setMessage(task.getTaskDescription());


                    AlertDialog.Builder alertDialogbuilder = descAlert.setPositiveButton("Accept", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialogInterface, int i) {
                            if (!serverConnection.isOnJob()) {
                                serverConnection.acceptTask(task);
                                Snackbar.make(getWindow().getDecorView().getRootView(), "You are on the job.Get to it!!!", Snackbar.LENGTH_SHORT).show();
                            } else {
                                Snackbar.make(getWindow().getDecorView().getRootView(), "You can't do more than one job!", Snackbar.LENGTH_SHORT).show();
                            }
                        }
                    }).setNegativeButton("Decline", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialogInterface, int i) {
                            //decline ticket
                        }
                    });
                }
                AlertDialog alertDialog = descAlert.create();
                alertDialog.setCanceledOnTouchOutside(true);
                alertDialog.show();
            }
            }
        });

    }

    public void showMyJob(View v) {
        if (serverConnection.isOnJob()) {
            startActivity(new Intent(Main2Activity.this, MyJob.class));
        }else {
            Snackbar.make(v,"You are currently not doing anything.",Snackbar.LENGTH_SHORT).show();

        }

    }

    public void setName(String name) {
        clientName = name;
    }

    public String getName() {
        return clientName;
    }


    public void addToList() {
        name.clear();
        int sosTasksSize = serverConnection.getNumberOfSosTasks();
        int size = 0;
        try {
            size = tasksUpdater.getTasks().size();
        }catch (Exception e) {
            Log.e("debug",e.getMessage());
        }
        if (sosTasksSize != 0)  {
            for (int i = 0; i < sosTasksSize; i++) {
                name.add(serverConnection.sosTaskND((byte)i,(byte)0));
            }
        }
        if (size != 0 ) {
            for (int i = 0; i < size; i++) {
                name.add(tasksUpdater.getTasks().get(i).getTaskName());
            }
        }else if(size == 0 && sosTasksSize == 0){
            name.add(0,"No new tasks!");
        }
        updateTasks();
    }

    public static ServerConnection getServerConnection() {
        return serverConnection;
    }

    public TasksUpdater getTasksUpdater() {
        return tasksUpdater;
    }

    public void updateTasks()
    {
        runOnUiThread(new Runnable()
        {
            public void run()
            {
                taskView.invalidateViews();
            }
        });
    }

}
