
import android.util.Log;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import com.DeployServer.Tasks;

/**
 * Created by n01179251 on 7/10/2017.
 */

public class ServerConnection extends Thread {


    private PrintWriter printWriter;
    private ObjectInputStream ois;
    private Socket socket;
    private boolean isRunning;
    private boolean onJob = false;
    private static Tasks currentTask = null;
    private Main2Activity act;
    private String messageReceived = "no";
    private BufferedReader bufferedReader;
    private String accepted = null;
    private boolean sosTasks = false;
    private int numberOfSosTasks = 0;
    String[][] sosTasksS = new String[5][5];

    public ServerConnection(Main2Activity act) {
        isRunning = true;
        this.act = act;
    }

    @Override
    public void run() {
        try {
            socket = new Socket("10.117.80.16", 6666);
            printWriter = new PrintWriter(socket.getOutputStream(), true);
            bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            printWriter.println("super");
            String message;
            while ((message = bufferedReader.readLine()) != null) {
                if (message.equals("new")) {
                    TasksUpdater.setTasks(getTasks(printWriter,bufferedReader));
                    act.addToList();
                }else if (message.equals("no")) {
                    act.showMessage("Someone jacked yo shit bitch !");
                    onJob = false;
                    currentTask = null;
                    Log.e("debug","DENIED!");
                }else if (message.equals("continue")) {
                    onJob = true;
                    act.showMessage("Go ahead and do your job!");
                }
            }
            socket.close();
        } catch (Exception e) {
            Log.e("debug", e.getMessage());
        }
    }

    public void sendMessage(String message) {
        printWriter.println(message);

    }

    public void sosTask() {
        printWriter.println("SOS-"+currentTask.getTaskName());
        printWriter.print(currentTask.getTaskDescription());
        printWriter.println("done");
        currentTask.setSos(true);
    }

    public ArrayList<Tasks> getTasks(PrintWriter printWriter, BufferedReader bufferedReader)throws Exception {
        ArrayList<Tasks> receivedTasks = new ArrayList<Tasks>();
        int numberOfTasks;
        printWriter.println("t");
        String isSos = bufferedReader.readLine();
        if (isSos.equals("yes")) {
            sosTasks = true;
            numberOfSosTasks = Integer.parseInt(bufferedReader.readLine());
            for (int i = 0; i < numberOfSosTasks; i++) {
                sosTasksS[i][0] = bufferedReader.readLine();
                String msg = "";
                sosTasksS[i][1] = "";
                while(!(msg.equals("done"))) {
                    if (!(msg.equals(""))) {
                        sosTasksS[i][1] = sosTasksS[i][1] + msg;
                    }
                    msg = bufferedReader.readLine();
                    if (!(sosTasksS[i][1].equals(""))) {
                        sosTasksS[i][1] = sosTasksS[i][1] +"\n";
                    }
                }
            }
        }else if (isSos.equals("no")) {
            sosTasks = false;
            numberOfSosTasks = 0;
        }


            numberOfTasks = Integer.parseInt(bufferedReader.readLine());
            if (numberOfTasks >= 0) {
                for (int i = 0; i < numberOfTasks; i++) {
                    String name;
                    String description= "";
                    String msg = "";
                    name = bufferedReader.readLine();
                    while(!(msg.equals("done"))) {
                        description = description + msg;
                        if (!(description.equals(""))) {
                            description = description +"\n";
                        }
                        msg = bufferedReader.readLine();
                    }
                    //bufferedReader.readLine();
                    //printWriter.println(".");
                    receivedTasks.add(i, new Tasks(name, description));
                }
            }
        return receivedTasks;

    }
    public boolean isOnJob() {
        return onJob;
    }

    public void acceptTask(Tasks acceptedTask) {
        printWriter.println("Accept:"+acceptedTask.getTaskName());
        currentTask = acceptedTask;
    }

    public static String getCurrentTaskName() {
        return currentTask.getTaskName();
    }

    public boolean sosTasks() {
        return sosTasks;
    }

    public void finishJob() {
        if (currentTask.getSos()) {
            turnOffSos();
        }
        printWriter.println("Finish:"+currentTask.getTaskName());
        currentTask = null;
        onJob = false;
    }

    public void turnOffSos() {
        printWriter.println("SOS:"+currentTask.getTaskName());
        currentTask.setSos(false);
    }

    public static String getCurrentTaskDescription() {
        return currentTask.getTaskDescription();
    }

    public Tasks getCurrentTask() {

        return currentTask;
    }

    public int getNumberOfSosTasks () {

        return numberOfSosTasks;
    }

    public void stopConnection() {
        isRunning = false;
    }

    public String sosTaskND(byte first, byte second) {
        return sosTasksS[first][second];
    }

    public String tasksReceived() {
        return messageReceived;
    }

}
